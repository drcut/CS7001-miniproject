import torch
import torch.nn as nn
import torch.nn.functional as F
import spconv.pytorch as spconv

width = 4096
height = 1024

# Encoder is the previous serveral layers from reuse_dis_predictor
class Encoder(nn.Module):
    def __init__(self):
        super(Encoder, self).__init__()
        self.net = spconv.SparseSequential(
            spconv.SubMConv2d(1, 64, 3, 1),
            nn.ReLU(),
            nn.BatchNorm1d(64),
            spconv.SparseMaxPool2d(2, 2, indice_key="subm0"),
            spconv.SubMConv2d(64, 64, 3, 1),
            nn.BatchNorm1d(64),
            spconv.SparseMaxPool2d(2, 2, indice_key="subm1"),
            spconv.SubMConv2d(64, 64, 3, 1),
            nn.BatchNorm1d(64),
            spconv.SparseMaxPool2d(2, 2, indice_key="subm2"),
            spconv.SubMConv2d(64, 64, 3, 1),
            nn.BatchNorm1d(64),
            spconv.SparseMaxPool2d(2, 2, indice_key="subm3"),
            spconv.SubMConv2d(64, 64, 3, 1),
            nn.BatchNorm1d(64),
            spconv.SparseMaxPool2d(2, 2, indice_key="subm4"),
            spconv.SubMConv2d(64, 64, 3, 1),
            nn.BatchNorm1d(64),
            nn.ReLU(),
            spconv.SparseMaxPool2d(2, 2, indice_key="subm5"),
        )

    def forward(self, x_sp):
        x = self.net(x_sp)
        return x

# Decoder is the reverse version of encoder
class Decoder(nn.Module):
    def __init__(self):
        super(Decoder, self).__init__()
        self.net = nn.Sequential(
            nn.Upsample(scale_factor=4, mode='bilinear', align_corners=True),
            nn.Conv2d(64, 32, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.Upsample(scale_factor=4, mode='bilinear', align_corners=True),
            nn.Conv2d(32, 8, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(8),
            nn.ReLU(),
            nn.Upsample(scale_factor=4, mode='bilinear', align_corners=True),
            nn.Conv2d(8, 1, kernel_size=3, padding=1, bias=False),
            nn.ReLU(),
        )

    def forward(self, x):
        # x: sparse tensor generated by encoder
        x = self.net(x)
        return x

class AutoEncoder(nn.Module):
    def __init__(self):
        super(AutoEncoder, self).__init__()
        self.encoder = Encoder()
        self.decoder = Decoder()
        self.to_dense = spconv.ToDense()
    
    def encode(self, x):
        # x: must be NHWC tensor
        x_sp = spconv.SparseConvTensor.from_dense(x.reshape(-1, height, width, 1))
        x_sp = self.encoder(x_sp)
        x = self.to_dense(x_sp)
        return x

    def decode(self, x):
        # x: [8, 64, 16, 64]
        return self.decoder(x)

    def forward(self, x):
        raise NotImplementEderror